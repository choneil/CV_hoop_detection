import cv2 as cv
import numpy as np

vid = cv.VideoCapture('Hoop Detection/Hoop_vid.mov')  # Use forward slashes for file paths
frame_no = 0

# Dimensions of video frame
width = int(vid.get(cv.CAP_PROP_FRAME_WIDTH))
height = int(vid.get(cv.CAP_PROP_FRAME_HEIGHT))
font = cv.FONT_HERSHEY_SIMPLEX

hsv_data = {
    "Red1": [[0, 145, 145], [15, 255, 255]],
    "Red2": [[170, 90, 77], [180, 255, 255]],
    "Blue": [[95, 150, 172], [140, 255, 255]],
}
adjustments = {
    "Blur": [9,15,0],#kernel, sigmaX, sixmaY
    'Thresh': [150, 255]#lower, upper
}

def nada(x):
    pass  # Callback for trackbars (does nothing)

# Create the adjustment window
cv.namedWindow('Adjustments')
cv.resizeWindow('Adjustments',400,1000)
# Create trackbars for adjustments
cv.createTrackbar("Blur Kernel",'Adjustments',9,11,nada)
cv.createTrackbar('Blur sigmaX','Adjustments',15,100,nada)
cv.createTrackbar('Blur sigmaY','Adjustments',0,100,nada)

cv.createTrackbar('Thresh Lower','Adjustments',150,255,nada)
cv.createTrackbar('Thresh Upper','Adjustments',255,255,nada)
# Create trackbars for each color
for color_name, (lower, upper) in hsv_data.items():
    cv.createTrackbar(f"{color_name} H Min", 'Adjustments', lower[0], 180, nada)
    cv.createTrackbar(f"{color_name} H Max", 'Adjustments', upper[0], 180, nada)
    cv.createTrackbar(f"{color_name} S Min", 'Adjustments', lower[1], 255, nada)
    cv.createTrackbar(f"{color_name} S Max", 'Adjustments', upper[1], 255, nada)
    cv.createTrackbar(f"{color_name} V Min", 'Adjustments', lower[2], 255, nada)
    cv.createTrackbar(f"{color_name} V Max", 'Adjustments', upper[2], 255, nada)

def get_trackbar_positions():
    lower_bounds = {}
    upper_bounds = {}
    for color_name in hsv_data.keys():
        h_min = cv.getTrackbarPos(f"{color_name} H Min", 'Adjustments')
        h_max = cv.getTrackbarPos(f"{color_name} H Max", 'Adjustments')
        s_min = cv.getTrackbarPos(f"{color_name} S Min", 'Adjustments')
        s_max = cv.getTrackbarPos(f"{color_name} S Max", 'Adjustments')
        v_min = cv.getTrackbarPos(f"{color_name} V Min", 'Adjustments')
        v_max = cv.getTrackbarPos(f"{color_name} V Max", 'Adjustments')
        
        lower_bounds[color_name] = [h_min, s_min, v_min]
        upper_bounds[color_name] = [h_max, s_max, v_max]  
    return lower_bounds, upper_bounds

# Variables to resize video frame with the correct ratio
ratio = width / height
new_h = 540
new_w = int(new_h * ratio) 

while True:
    kernell = (cv.getTrackbarPos('Blur Kernel','Adjustments'),cv.getTrackbarPos('Blur Kernel','Adjustments'))
    blurx = cv.getTrackbarPos('Blur sigmaX','Adjustments')
    blury = cv.getTrackbarPos('Blur sigmaY','Adjustments')
    threshl = cv.getTrackbarPos('Thresh Lower','Adjustments')
    threshu = cv.getTrackbarPos('Thresh Upper','Adjustments')
    lower, upper = get_trackbar_positions()
    ret, frame = vid.read()
    
    if not ret:  # Check if the frame is successfully read
        print("Failed to read frame, stopping.")
        break

    if frame is None:  # Check if frame is None
        print("Error: No frame to process.")
        break

    # Resize frame while maintaining ratio
    small_frame = cv.resize(frame, (new_w, new_h))
    
    # Convert color to HSV 
    hsv = cv.cvtColor(small_frame, cv.COLOR_BGR2HSV)
    gray = cv.cvtColor(small_frame, cv.COLOR_BGR2GRAY)
    # Create masks for the different HSV color ranges
    mask1 = cv.inRange(hsv, 
                       np.array([lower["Red1"][0], lower["Red1"][1], lower["Red1"][2]]),
                       np.array([upper["Red1"][0], upper["Red1"][1], upper["Red1"][2]]))

    mask2 = cv.inRange(hsv, 
                       np.array([lower["Red2"][0], lower["Red2"][1], lower["Red2"][2]]),
                       np.array([upper["Red2"][0], upper["Red2"][1], upper["Red2"][2]]))
    
    mask3 = cv.inRange(hsv, 
                       np.array([lower["Blue"][0], lower["Blue"][1], lower["Blue"][2]]),
                       np.array([upper["Blue"][0], upper["Blue"][1], upper["Blue"][2]]))

    # Combine the lower and upper red masks
    red_mask = mask1 + mask2
    blue_mask = mask3
    mask_all = red_mask+blue_mask
    # Create blank BGR images for the masks
    red_overlay = np.zeros_like(small_frame)
    blue_overlay = np.zeros_like(small_frame)

    # Apply red color to red_mask areas
    red_overlay[red_mask > 0] = [0, 0, 255]  # Red color (BGR format)

    # Apply blue color to blue_mask areas
    blue_overlay[blue_mask > 0] = [255, 0, 0]  # Blue color (BGR format)

    # Combine the red and blue overlays
    colored_mask = cv.addWeighted(red_overlay, 1.0, blue_overlay, 1.0, 0)

    # Convert grayscale image to BGR for overlay
    image_bgr = cv.cvtColor(gray, cv.COLOR_GRAY2BGR)

    # Blend the colored mask with the grayscale image
    blended = cv.addWeighted(image_bgr, 0.7, colored_mask, 0.3, 0)
    kernel = cv.getStructuringElement(cv.MORPH_RECT, kernell)
    mask_all = cv.morphologyEx(mask_all, cv.MORPH_OPEN, kernel)
    mask_all = cv.morphologyEx(mask_all, cv.MORPH_DILATE, kernel)


    



    # Apply edge detection
    thresh = cv.threshold(mask_all, threshl,threshu, cv.THRESH_BINARY)[1]
    blur = cv.GaussianBlur(thresh, kernell, blurx, None, blury)
    dilate = cv.morphologyEx(blur, cv.MORPH_DILATE, kernel)
    diff = cv.absdiff(dilate, blur)
    edges = 255 - diff
    can = cv.Canny(diff, 100, 255, None, 3, False)
    cdstP = cv.cvtColor(can, cv.COLOR_GRAY2BGR)
    print(frame_no)
    frame_no += 1
    while True:
    # Show the frames and masks
        

        cv.imshow('mask', mask_all)
        cv.imshow('blur', blur)
        cv.imshow('thresh',colored_mask)
        cv.imshow('smallframe', small_frame)

        if cv.waitKey(1) == ord('q'):
            break

vid.release()
cv.destroyAllWindows()
